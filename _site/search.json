[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "blog",
    "section": "",
    "text": "To learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "lessons/01_what_is_that.html",
    "href": "lessons/01_what_is_that.html",
    "title": "blog",
    "section": "",
    "text": "Trying out the concepts taught in fastai lesson 1 with a new dataset.\nInspired by this Superman comic, I’m building a deep learning classifier to distinhuish between images of birds, planes and supermen.\n\n\n!pwd\n\n/content\n\n\n\n\nHere’s the process:\n\nChoose categories- bird, plane, superman\nDownload 1 image for each and check they’re ok\nDownload 30 images for each into directories named by category\nCheck images are valid\nDownload pre-trained model\nFeed dir of images into model, fine tune, check performance\n\n\n!pip install -Uqq fastai duckduckgo_search\n\n     |█████▏                          | 10 kB 24.3 MB/s eta 0:00:01     |██████████▍                     | 20 kB 15.9 MB/s eta 0:00:01     |███████████████▋                | 30 kB 20.8 MB/s eta 0:00:01     |████████████████████▉           | 40 kB 13.2 MB/s eta 0:00:01     |██████████████████████████      | 51 kB 7.1 MB/s eta 0:00:01     |███████████████████████████████▎| 61 kB 8.4 MB/s eta 0:00:01     |████████████████████████████████| 62 kB 1.5 MB/s \n     |███▍                            | 10 kB 25.6 MB/s eta 0:00:01     |██████▉                         | 20 kB 33.5 MB/s eta 0:00:01     |██████████▏                     | 30 kB 38.0 MB/s eta 0:00:01     |█████████████▋                  | 40 kB 43.0 MB/s eta 0:00:01     |█████████████████               | 51 kB 44.0 MB/s eta 0:00:01     |████████████████████▍           | 61 kB 47.6 MB/s eta 0:00:01     |███████████████████████▊        | 71 kB 50.3 MB/s eta 0:00:01     |███████████████████████████▏    | 81 kB 51.8 MB/s eta 0:00:01     |██████████████████████████████▌ | 92 kB 53.5 MB/s eta 0:00:01     |████████████████████████████████| 96 kB 6.5 MB/s \nERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\nflask 1.1.4 requires click<8.0,>=5.1, but you have click 8.1.3 which is incompatible.\n\n\n\nfrom duckduckgo_search import ddg_images\nfrom fastcore.all import *\n\n\n\n\n\n\n\nbird = ddg_images('bird', max_results=2)\n\n\nBird is a list of dicts\nwrap inside L\nuse .itemgot('image') on L to extract the urls only\n\n\nbird\n\n[{'title': 'Pair these bird events with Great Backyard Bird Count - pennlive.com',\n  'image': 'https://www.pennlive.com/resizer/UeXGnWaOE07lC4n_J5lJ0a1M-_M=/1280x0/smart/advancelocal-adapter-image-uploads.s3.amazonaws.com/image.pennlive.com/home/penn-media/width2048/img/entertainment_impact/photo/shutterstock-58364638jpg-6932548563f01558.jpg',\n  'thumbnail': 'https://tse1.mm.bing.net/th?id=OIP.tAh4IvhbxtzpJUCMwC-djQHaGe&pid=Api',\n  'url': 'https://www.pennlive.com/entertainment/2015/02/pair_these_bird_events_with_gr.html',\n  'height': 1118,\n  'width': 1280,\n  'source': 'Bing'},\n {'title': \"Help Count Birds for Science during Audubon's Annual Christmas Bird Count - Restore the ...\",\n  'image': 'https://www.mississippiriverdelta.org/files/2015/12/BUFH-wing-feathers.jpg',\n  'thumbnail': 'https://tse2.mm.bing.net/th?id=OIP.1xYUOvqR7iH9FMoKBawtIAHaF1&pid=Api',\n  'url': 'https://mississippiriverdelta.org/help-count-birds-for-science-during-audubons-annual-christmas-bird-count/',\n  'height': 1340,\n  'width': 1700,\n  'source': 'Bing'}]\n\n\n\nL(bird).itemgot('image')\n\n(#2) ['https://www.pennlive.com/resizer/UeXGnWaOE07lC4n_J5lJ0a1M-_M=/1280x0/smart/advancelocal-adapter-image-uploads.s3.amazonaws.com/image.pennlive.com/home/penn-media/width2048/img/entertainment_impact/photo/shutterstock-58364638jpg-6932548563f01558.jpg','https://www.mississippiriverdelta.org/files/2015/12/BUFH-wing-feathers.jpg']\n\n\nBuild search_images using these\n\ndef search_images(keyword, max_images=30):\n    return L(ddg_images(keyword, max_results=max_images)).itemgot('image')\n\n\nurl = search_images('flying bird', 1)\nurl\n\n(#1) ['http://1.bp.blogspot.com/-6anwlEoD-Ec/UmvgxLKbxsI/AAAAAAAAZhQ/z64F1RGv7iU/s1600/Flying+Birds+Wallpapers+%25283%2529.jpg']\n\n\n\n\n\n\nfrom fastdownload import download_url\ndownload_url(url[0], dest='bird.jpg', show_progress=False)\n\nPath('bird.jpg')\n\n\n\nfrom fastai.vision.all import *\nim = Image.open('bird.jpg')\nim.to_thumb(256,256)\n\n\n\n\n\ndownload_url(search_images('flying plane', 1)[0], dest='plane.jpg', show_progress=False)\nImage.open('plane.jpg').to_thumb(256, 256)\n\n\n\n\n\ndownload_url(search_images('flying superman', 1)[0], dest='superman.jpg', show_progress=False)\nImage.open('superman.jpg').to_thumb(256, 256)\n\n\n\n\n\n\n\n\nimport os\n\n\nsearches = ['bird', 'plane', 'superman']\npath = Path('is_that_a')\n\nfor s in searches:\n    dest = (path/s)\n    dest.mkdir(exist_ok=True, parents=True)\n    download_images(dest, urls=search_images(f'flying {s}'))\n    resize_images(path/s, max_size=400, dest=path/s)\n\n\nfailed = verify_images(get_image_files(path))\nfailed.map(Path.unlink)\nlen(failed)\n\n0\n\n\n\n\n\n\n\ndls = DataBlock(blocks=(ImageBlock, CategoryBlock), \n                get_items=get_image_files,\n                splitter=RandomSplitter(valid_pct=0.2, seed=42),\n                get_y=parent_label,\n                item_tfms=[Resize(192, method='squish')] \n                ).dataloaders(path, bs=32)\ndls.show_batch(max_n=12)\n\n\n\n\n\nlearn = vision_learner(dls, resnet18, metrics=error_rate)\nlearn.fine_tune(3)\n\n/usr/local/lib/python3.7/dist-packages/torchvision/models/_utils.py:209: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and will be removed in 0.15, please use 'weights' instead.\n  f\"The parameter '{pretrained_param}' is deprecated since 0.13 and will be removed in 0.15, \"\n/usr/local/lib/python3.7/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and will be removed in 0.15. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.\n  warnings.warn(msg)\nDownloading: \"https://download.pytorch.org/models/resnet18-f37072fd.pth\" to /root/.cache/torch/hub/checkpoints/resnet18-f37072fd.pth\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n      epoch\n      train_loss\n      valid_loss\n      error_rate\n      time\n    \n  \n  \n    \n      0\n      2.054615\n      1.164085\n      0.352941\n      00:08\n    \n  \n\n\n\n\n\n\n\n\n\n  \n    \n      epoch\n      train_loss\n      valid_loss\n      error_rate\n      time\n    \n  \n  \n    \n      0\n      1.213407\n      0.438084\n      0.176471\n      00:12\n    \n    \n      1\n      0.745004\n      0.064237\n      0.000000\n      00:13\n    \n    \n      2\n      0.510461\n      0.036753\n      0.000000\n      00:13\n    \n  \n\n\n\n\n\n\n\nis_that_a,_,probs = learn.predict(PILImage.create('bird.jpg'))\nprint(f\"That is a: {is_that_a}.\")\nprint(f\"Probability: {probs[0]:.4f}\")\n\nim = Image.open('bird.jpg')\nim.to_thumb(256,256)\n\n\n\n\n\n\n\n\nThat is a: bird.\nProbability: 0.9944\n\n\n\n\n\n\nis_that_a,_,probs = learn.predict(PILImage.create('plane.jpg'))\nprint(f\"That is a: {is_that_a}.\")\nprint(f\"Probability: {probs[1]:.4f}\")\n\nim = Image.open('plane.jpg')\nim.to_thumb(256,256)\n\n\n\n\n\n\n\n\nThat is a: plane.\nProbability: 0.9989\n\n\n\n\n\n\nis_that_a,_,probs = learn.predict(PILImage.create('superman.jpg'))\nprint(f\"That is a: {is_that_a}.\")\nprint(f\"Probability: {probs[2]:.4f}\")\n\nim = Image.open('superman.jpg')\nim.to_thumb(256,256)\n\n\n\n\n\n\n\n\nThat is a: superman.\nProbability: 0.9998"
  },
  {
    "objectID": "myblog/2_first_post.html",
    "href": "myblog/2_first_post.html",
    "title": "blog",
    "section": "",
    "text": "In the lecture, J explains how training a model before cleaning can later help with cleaning. That’s such a clean idea! And the built in fastai functions to do that are super handy!\n\nI’m thinking about applying this, to sequence classification in bio where the problem is you can’t tell just by looking what a sequence actually is. How could we solve for that?\n\nHuggingFace Spaces to host models, Gradio or StreamLit to build app, GitHub Pages to host website. The two can talk to each other. Which means it is possible to build web apps!\n\nI really want to do a bit of work and bring my rna models online. Maybe have a little webapp, good documentation and accompanying blog posts.\nWalk around the timestamps to get what you need."
  }
]